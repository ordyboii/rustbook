// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
// HINT: See also -Z dump-mir for MIR at specific points during compilation.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let _3: &[&str; 1];
    let _4: f32;
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let _9: &[&str; 3];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 2];
    let _12: [core::fmt::rt::Argument<'_>; 2];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &f32;
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &f32;
    let mut _17: &[core::fmt::rt::Placeholder];
    let _18: &[core::fmt::rt::Placeholder; 2];
    let mut _19: core::fmt::rt::UnsafeArg;
    let mut _21: isize;
    let _23: ();
    let mut _24: std::fmt::Arguments<'_>;
    let _25: &[&str; 2];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let _29: &std::string::String;
    let _31: ();
    let mut _32: std::fmt::Arguments<'_>;
    let _33: &[&str; 2];
    let _34: &[core::fmt::rt::Argument<'_>; 1];
    let _35: [core::fmt::rt::Argument<'_>; 1];
    let mut _36: core::fmt::rt::Argument<'_>;
    let _37: &std::vec::Vec<u32>;
    scope 1 {
        debug example => _4;
        let _5: f32;
        scope 2 {
            debug converted => _5;
            let _20: FibonacciSequence;
            scope 3 {
                debug fibonacci => _20;
                let _22: std::string::String;
                let _30: std::vec::Vec<u32>;
                let _38: ();
                scope 4 {
                    debug seq => _22;
                }
                scope 5 {
                    debug seq => _30;
                }
                scope 6 {
                    debug lyrics => const ();
                }
            }
        }
    }

    bb0: {
        _3 = const main::promoted[4];
        _2 = core::fmt::rt::<impl Arguments<'_>>::new_const::<1>(copy _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = _print(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = const 10f32;
        _5 = farenheiht_to_celsius(copy _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = const main::promoted[3];
        _8 = copy _9 as &[&str] (PointerCoercion(Unsize, Implicit));
        _14 = &_4;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<f32>(copy _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = &_5;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<f32>(copy _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = [move _13, move _15];
        _11 = &_12;
        _10 = copy _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize, Implicit));
        _18 = const main::promoted[2];
        _17 = copy _18 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize, Implicit));
        _19 = core::fmt::rt::UnsafeArg::new() -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = core::fmt::rt::<impl Arguments<'_>>::new_v1_formatted(move _8, move _10, move _17, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb7, unwind continue];
    }

    bb7: {
        _6 = _print(move _7) -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = fibonacci_sequence(const 20_u32, const true) -> [return: bb9, unwind continue];
    }

    bb9: {
        _21 = discriminant(_20);
        switchInt(move _21) -> [0: bb11, 1: bb12, otherwise: bb10];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _30 = move ((_20 as U32Vec).0: std::vec::Vec<u32>);
        _33 = const main::promoted[0];
        _37 = &_30;
        _36 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<u32>>(copy _37) -> [return: bb16, unwind: bb21];
    }

    bb12: {
        _22 = move ((_20 as CommaSeparated).0: std::string::String);
        _25 = const main::promoted[1];
        _29 = &_22;
        _28 = core::fmt::rt::Argument::<'_>::new_display::<String>(copy _29) -> [return: bb13, unwind: bb22];
    }

    bb13: {
        _27 = [move _28];
        _26 = &_27;
        _24 = core::fmt::rt::<impl Arguments<'_>>::new_v1::<2, 1>(copy _25, copy _26) -> [return: bb14, unwind: bb22];
    }

    bb14: {
        _23 = _print(move _24) -> [return: bb15, unwind: bb22];
    }

    bb15: {
        drop(_22) -> [return: bb19, unwind continue];
    }

    bb16: {
        _35 = [move _36];
        _34 = &_35;
        _32 = core::fmt::rt::<impl Arguments<'_>>::new_v1::<2, 1>(copy _33, copy _34) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        _31 = _print(move _32) -> [return: bb18, unwind: bb21];
    }

    bb18: {
        drop(_30) -> [return: bb19, unwind continue];
    }

    bb19: {
        _38 = twelve_days_of_christmas() -> [return: bb20, unwind continue];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_30) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_22) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

const main::promoted[0]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

const main::promoted[1]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

const main::promoted[2]: &[core::fmt::rt::Placeholder; 2] = {
    let mut _0: &[core::fmt::rt::Placeholder; 2];
    let mut _1: [core::fmt::rt::Placeholder; 2];
    let mut _2: core::fmt::rt::Placeholder;
    let mut _3: core::fmt::rt::Count;
    let mut _4: core::fmt::rt::Count;
    let mut _5: core::fmt::rt::Placeholder;
    let mut _6: core::fmt::rt::Count;
    let mut _7: core::fmt::rt::Count;

    bb0: {
        _3 = core::fmt::rt::Count::Is(const 1_u16);
        _4 = core::fmt::rt::Count::Implied;
        _2 = core::fmt::rt::Placeholder { position: const 0_usize, flags: const 4026531872_u32, precision: move _3, width: move _4 };
        _6 = core::fmt::rt::Count::Is(const 2_u16);
        _7 = core::fmt::rt::Count::Implied;
        _5 = core::fmt::rt::Placeholder { position: const 1_usize, flags: const 4026531872_u32, precision: move _6, width: move _7 };
        _1 = [move _2, move _5];
        _0 = &_1;
        return;
    }
}

const main::promoted[3]: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " degrees farenheiht is ", const " degrees celsius\n"];
        _0 = &_1;
        return;
    }
}

const main::promoted[4]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Variables practise\n"];
        _0 = &_1;
        return;
    }
}

fn farenheiht_to_celsius(_1: f32) -> f32 {
    debug farenheiht => _1;
    let mut _0: f32;
    let mut _2: f32;
    let mut _3: f32;

    bb0: {
        _3 = Sub(copy _1, const 32f32);
        _2 = Mul(move _3, const 5f32);
        _0 = Div(move _2, const 9f32);
        return;
    }
}

fn fibonacci_sequence(_1: u32, _2: bool) -> FibonacciSequence {
    debug length => _1;
    debug format => _2;
    let mut _0: FibonacciSequence;
    let mut _3: std::vec::Vec<u32>;
    let mut _4: std::boxed::Box<[u32]>;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: *mut u8;
    let mut _8: std::boxed::Box<[u32; 2]>;
    let mut _10: &u32;
    let mut _11: &std::vec::Vec<u32>;
    let mut _13: &u32;
    let mut _14: &std::vec::Vec<u32>;
    let mut _15: std::ops::Range<u32>;
    let mut _16: std::ops::Range<u32>;
    let mut _18: std::option::Option<u32>;
    let mut _19: &mut std::ops::Range<u32>;
    let mut _20: isize;
    let mut _22: u32;
    let mut _23: u32;
    let mut _24: (u32, bool);
    let mut _25: u32;
    let _26: ();
    let mut _27: &mut std::vec::Vec<u32>;
    let mut _28: std::string::String;
    let _29: &[std::string::String];
    let mut _30: &std::vec::Vec<std::string::String>;
    let _31: std::vec::Vec<std::string::String>;
    let mut _32: std::iter::Map<std::slice::Iter<'_, u32>, {closure@src/main.rs:46:22: 46:25}>;
    let mut _33: std::slice::Iter<'_, u32>;
    let _34: &[u32];
    let mut _35: &std::vec::Vec<u32>;
    let mut _36: &str;
    let mut _37: std::vec::Vec<u32>;
    let mut _38: bool;
    let mut _39: *const [u32; 2];
    let mut _40: *const ();
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: bool;
    let mut _46: *const ();
    let mut _47: usize;
    let mut _48: usize;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    scope 1 {
        debug sequence => _3;
        let mut _9: u32;
        scope 2 {
            debug start => _9;
            let mut _12: u32;
            scope 3 {
                debug end => _12;
                let mut _17: std::ops::Range<u32>;
                scope 4 {
                    debug iter => _17;
                    let _21: u32;
                    scope 5 {
                        debug sum => _21;
                    }
                }
            }
        }
    }

    bb0: {
        _38 = const false;
        _5 = SizeOf([u32; 2]);
        _6 = AlignOf([u32; 2]);
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [u32; 2]);
        _39 = copy ((_8.0: std::ptr::Unique<[u32; 2]>).0: std::ptr::NonNull<[u32; 2]>) as *const [u32; 2] (Transmute);
        _40 = copy _39 as *const () (PtrToPtr);
        _41 = copy _40 as usize (Transmute);
        _42 = AlignOf([u32; 2]);
        _43 = Sub(copy _42, const 1_usize);
        _44 = BitAnd(copy _41, copy _43);
        _45 = Eq(copy _44, const 0_usize);
        assert(copy _45, "misaligned pointer dereference: address must be a multiple of {} but is {}", copy _42, copy _41) -> [success: bb26, unwind unreachable];
    }

    bb2: {
        _38 = const true;
        _11 = &_3;
        _10 = <Vec<u32> as Index<usize>>::index(move _11, const 0_usize) -> [return: bb3, unwind: bb23];
    }

    bb3: {
        _9 = copy (*_10);
        _14 = &_3;
        _13 = <Vec<u32> as Index<usize>>::index(move _14, const 1_usize) -> [return: bb4, unwind: bb23];
    }

    bb4: {
        _12 = copy (*_13);
        _16 = std::ops::Range::<u32> { start: const 2_u32, end: copy _1 };
        _15 = <std::ops::Range<u32> as IntoIterator>::into_iter(move _16) -> [return: bb5, unwind: bb23];
    }

    bb5: {
        _17 = move _15;
        goto -> bb6;
    }

    bb6: {
        _19 = &mut _17;
        _18 = <std::ops::Range<u32> as Iterator>::next(copy _19) -> [return: bb7, unwind: bb23];
    }

    bb7: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb10, 1: bb9, otherwise: bb8];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _22 = copy _9;
        _23 = copy _12;
        _24 = AddWithOverflow(copy _22, copy _23);
        assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", move _22, move _23) -> [success: bb11, unwind: bb23];
    }

    bb10: {
        switchInt(copy _2) -> [0: bb13, otherwise: bb12];
    }

    bb11: {
        _21 = move (_24.0: u32);
        _25 = copy _12;
        _9 = move _25;
        _12 = copy _21;
        _27 = &mut _3;
        _26 = Vec::<u32>::push(move _27, copy _21) -> [return: bb28, unwind: bb23];
    }

    bb12: {
        _35 = &_3;
        _34 = <Vec<u32> as Deref>::deref(move _35) -> [return: bb14, unwind: bb23];
    }

    bb13: {
        _38 = const false;
        _37 = move _3;
        _0 = FibonacciSequence::U32Vec(move _37);
        goto -> bb20;
    }

    bb14: {
        _33 = core::slice::<impl [u32]>::iter(copy _34) -> [return: bb15, unwind: bb23];
    }

    bb15: {
        _32 = <std::slice::Iter<'_, u32> as Iterator>::map::<String, {closure@src/main.rs:46:22: 46:25}>(move _33, const ZeroSized: {closure@src/main.rs:46:22: 46:25}) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        _31 = <Map<std::slice::Iter<'_, u32>, {closure@src/main.rs:46:22: 46:25}> as Iterator>::collect::<Vec<String>>(move _32) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _30 = &_31;
        _29 = <Vec<String> as Deref>::deref(move _30) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        _36 = const ", ";
        _28 = slice::<impl [String]>::join::<&str>(copy _29, move _36) -> [return: bb19, unwind: bb22];
    }

    bb19: {
        _0 = FibonacciSequence::CommaSeparated(move _28);
        drop(_31) -> [return: bb20, unwind: bb23];
    }

    bb20: {
        switchInt(copy _38) -> [0: bb21, otherwise: bb25];
    }

    bb21: {
        _38 = const false;
        return;
    }

    bb22 (cleanup): {
        drop(_31) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_3) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        resume;
    }

    bb25: {
        drop(_3) -> [return: bb21, unwind continue];
    }

    bb26: {
        _46 = copy _39 as *const () (PtrToPtr);
        _47 = copy _46 as usize (Transmute);
        _48 = SizeOf([u32; 2]);
        _49 = Ne(copy _48, const 0_usize);
        _50 = Eq(copy _47, const 0_usize);
        _51 = BitAnd(copy _50, copy _49);
        _52 = Not(copy _51);
        assert(copy _52, "null pointer dereference occurred") -> [success: bb27, unwind unreachable];
    }

    bb27: {
        (*_39) = [const 0_u32, const 1_u32];
        _4 = move _8 as std::boxed::Box<[u32]> (PointerCoercion(Unsize, Implicit));
        _3 = slice::<impl [u32]>::into_vec::<std::alloc::Global>(move _4) -> [return: bb2, unwind continue];
    }

    bb28: {
        goto -> bb6;
    }
}

fn fibonacci_sequence::{closure#0}(_1: &mut {closure@src/main.rs:46:22: 46:25}, _2: &u32) -> String {
    debug x => _2;
    let mut _0: std::string::String;

    bb0: {
        _0 = <u32 as ToString>::to_string(copy _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn twelve_days_of_christmas() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn FibonacciSequence::U32Vec(_1: Vec<u32>) -> FibonacciSequence {
    let mut _0: FibonacciSequence;

    bb0: {
        _0 = FibonacciSequence::U32Vec(move _1);
        return;
    }
}

// MIR FOR CTFE
fn FibonacciSequence::U32Vec(_1: Vec<u32>) -> FibonacciSequence {
    let mut _0: FibonacciSequence;

    bb0: {
        _0 = FibonacciSequence::U32Vec(move _1);
        return;
    }
}

fn FibonacciSequence::CommaSeparated(_1: String) -> FibonacciSequence {
    let mut _0: FibonacciSequence;

    bb0: {
        _0 = FibonacciSequence::CommaSeparated(move _1);
        return;
    }
}

// MIR FOR CTFE
fn FibonacciSequence::CommaSeparated(_1: String) -> FibonacciSequence {
    let mut _0: FibonacciSequence;

    bb0: {
        _0 = FibonacciSequence::CommaSeparated(move _1);
        return;
    }
}
